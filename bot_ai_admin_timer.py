from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime

TOKEN = "7807213915:AAGtoLBhhKihds0Y-YGwfBFZiCAZvx-P76Y"
ADMIN_IDS = [7620745738]

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

waiting_users = {}
deal_timers = {}

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")],
        [KeyboardButton(text="–û—Ç–∑—ã–≤—ã")],
        [KeyboardButton(text="–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")]
    ],
    resize_keyboard=True
)

cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")]],
    resize_keyboard=True
)

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ì–ê–†–ê–ù–¢-–ë–û–¢. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard)

@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def deal_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    if user_id in waiting_users:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–¥–µ–ª–∫—É.", reply_markup=cancel_keyboard)
        return
    waiting_users[user_id] = {
        "username": username,
        "created": datetime.utcnow()
    }
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å—É—Ç—å —Å–¥–µ–ª–∫–∏ –∏ —É–∫–∞–∂–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=cancel_keyboard)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    async def reminder():
        await asyncio.sleep(600)
        if user_id in waiting_users:
            await message.answer("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –Ω–∞—á–∞–ª–∏ —Å–¥–µ–ª–∫—É, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    deal_timers[user_id] = asyncio.create_task(reminder())

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")
async def cancel_deal(message: Message):
    user_id = message.from_user.id
    if user_id in waiting_users:
        waiting_users.pop(user_id)
        if user_id in deal_timers:
            deal_timers[user_id].cancel()
            deal_timers.pop(user_id)
        await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=start_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏.", reply_markup=start_keyboard)

@dp.message(F.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
async def list_deals(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not waiting_users:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return
    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n"
    for user_id, data in waiting_users.items():
        username = data['username']
        text += f"üë§ @{username} ({user_id})\n"
    await message.answer(text)

@dp.message()
async def fallback(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=start_keyboard)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
