
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime, timedelta

TOKEN = "7807213915:AAGtoLBhhKihds0Y-YGwfBFZiCAZvx-P76Y"
ADMIN_IDS = [7620745738]  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∞–¥–º–∏–Ω–æ–≤

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

waiting_users = {}
support_chats = {}
banned_users = set()

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")],
        [KeyboardButton(text="–û—Ç–∑—ã–≤—ã")],
        [KeyboardButton(text="–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
        [KeyboardButton(text="‚öô –ê–¥–º–∏–Ω–∫–∞")]
    ],
    resize_keyboard=True
)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏")],
        [KeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–∞")],
        [KeyboardButton(text="üì¨ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

deal_timers = {}

async def deal_timeout_checker():
    while True:
        now = datetime.utcnow()
        expired = []
        for user_id, start_time in deal_timers.items():
            if now - start_time > timedelta(minutes=10):
                expired.append(user_id)
        for user_id in expired:
            await bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –Ω–∞—á–∞–ª–∏ —Å–¥–µ–ª–∫—É, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –µ—ë. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
            del deal_timers[user_id]
        await asyncio.sleep(60)

@dp.message(F.text == "/start")
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def start_handler(message: Message):
    ai_tip = (
        "üí° <b>–°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–¥–µ–ª–∫–µ:</b>\n"
        "- –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞–ø—Ä—è–º—É—é.\n"
        "- –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –≥–∞—Ä–∞–Ω—Ç–∞."
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ì–ê–†–ê–ù–¢-–ë–û–¢. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard)
    await message.answer(ai_tip, parse_mode="HTML")

@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def deal_handler(message: Message):
    if message.from_user.id in banned_users:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏.")
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å—É—Ç—å —Å–¥–µ–ª–∫–∏ –∏ —É–∫–∞–∂–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    waiting_users[message.from_user.id] = message.date
    deal_timers[message.from_user.id] = datetime.utcnow()

@dp.message(F.text == "–û—Ç–∑—ã–≤—ã")
async def reviews_handler(message: Message):
    await message.answer("–ù–∞—à –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏: https://t.me/raindrop_reviews", reply_markup=back_keyboard)

@dp.message(F.text == "–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def support_handler(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.", reply_markup=back_keyboard)
    support_chats[message.from_user.id] = None

@dp.message(F.text == "‚öô –ê–¥–º–∏–Ω–∫–∞")
async def admin_panel(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!", reply_markup=admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@dp.message(F.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
async def show_deals(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not waiting_users:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
    else:
        users = "\n".join(str(uid) for uid in waiting_users.keys())
        await message.answer(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n{users}")

@dp.message(F.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not support_chats:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
    else:
        users = "\n".join(str(uid) for uid in support_chats.keys())
        await message.answer(f"–û–∂–∏–¥–∞—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{users}")

@dp.message(F.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–∞")
async def block_user_prompt(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å. –ü—Ä–∏–º–µ—Ä:\nban 123456789")

@dp.message(F.text.startswith("ban "))
async def ban_user(message: Message):
    if message.from_user.id in ADMIN_IDS:
        try:
            user_id = int(message.text.split(" ")[1])
            banned_users.add(user_id)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: ban 123456789")

@dp.message(F.text == "üì¨ –†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_prompt(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º. –ü—Ä–∏–º–µ—Ä:\nsend –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!")

@dp.message(F.text.startswith("send "))
async def broadcast_message(message: Message):
    if message.from_user.id in ADMIN_IDS:
        text = message.text[5:]
        for user_id in list(waiting_users.keys()) + list(support_chats.keys()):
            try:
                await bot.send_message(user_id, f"[–†–∞—Å—Å—ã–ª–∫–∞]:\n{text}")
            except:
                pass
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–¥–µ–ª–∫–∞—Ö: {len(waiting_users)}\nüîß –í –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {len(support_chats)}\nüö´ –í –±–∞–Ω–µ: {len(banned_users)}")

@dp.message()
async def all_messages(message: Message):
    if message.from_user.id in waiting_users:
        text = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'}:\n{message.text}"
        await bot.send_message(ADMIN_IDS[0], text)
        del waiting_users[message.from_user.id]
        deal_timers.pop(message.from_user.id, None)
        return

    if message.from_user.id not in ADMIN_IDS:
        if message.from_user.id in support_chats:
            text = f"[–ü–û–î–î–ï–†–ñ–ö–ê] @{message.from_user.username or '–±–µ–∑ username'} ({message.from_user.id}):\n{message.text}"
            await bot.send_message(ADMIN_IDS[0], text)
    else:
        if ":" in message.text:
            target_id_str, reply_text = message.text.split(":", 1)
            try:
                target_id = int(target_id_str.strip())
                await bot.send_message(target_id, f"[–ü–û–î–î–ï–†–ñ–ö–ê –û–¢–í–ï–¢]:\n{reply_text.strip()}")
                await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            except:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ç–∞–π–º–µ—Ä–æ–º, AI –∏ –∞–¥–º–∏–Ω–∫–æ–π!")
    asyncio.create_task(deal_timeout_checker())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
