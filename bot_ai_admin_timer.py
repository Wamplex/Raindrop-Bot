import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# üîê –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù
BOT_TOKEN = "7807213915:AAHNcYeY27DuOtkJbwH_2lHbElfKd212FZU"
ADMIN_ID = 7620745738  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DealStates(StatesGroup):
    waiting_username = State()
    waiting_description = State()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    buttons = [
        [InlineKeyboardButton(text="ü§ù –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/raindrop_reviews")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –°—Ç–∞—Ä—Ç
@dp.message(F.text, F.chat.type == "private")
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
@dp.callback_query(F.data == "create_deal")
async def create_deal(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏:")
    await state.set_state(DealStates.waiting_username)

@dp.message(DealStates.waiting_username)
async def deal_username(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –≤ —á—ë–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è —Å–¥–µ–ª–∫–∞:")
    await state.set_state(DealStates.waiting_description)

@dp.message(DealStates.waiting_description)
async def deal_description(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    await bot.send_message(
        ADMIN_ID,
        f"ü§ù <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b> –æ—Ç @{message.from_user.username} ({message.from_user.id})\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫: {data['username']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_deal"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_deal")]
        ])
    )
    await message.answer("–°–¥–µ–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")

# --- –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(F.data.in_({"accept_deal", "decline_deal"}))
async def deal_decision(callback: CallbackQuery):
    decision = "–ø—Ä–∏–Ω—è—Ç–∞" if callback.data == "accept_deal" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    await callback.message.edit_text(callback.message.text + f"\n\n‚úÖ –°–¥–µ–ª–∫–∞ {decision}.")

# --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
