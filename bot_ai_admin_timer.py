import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

TOKEN = "7807213915:AAGtoLBhhKihds0Y-YGwfBFZiCAZvx-P76Y"
ADMIN_ID = 7620745738

bot = Bot(TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('shop.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    category TEXT,
    name TEXT,
    price INTEGER,
    quantity INTEGER
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    orders INTEGER DEFAULT 0
)
''')

conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üéØ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")],
    [KeyboardButton(text="üê† –¢–æ–≤–∞—Ä—ã")],
    [KeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã"), KeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
], resize_keyboard=True)

admin_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã")],
    [KeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
], resize_keyboard=True)

support_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
], resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Deal(StatesGroup):
    waiting_username = State()
    waiting_description = State()

class Suggest(StatesGroup):
    waiting_text = State()

class EditProduct(StatesGroup):
    waiting_id = State()
    waiting_new_price = State()
    waiting_new_quantity = State()

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = main_kb
    if message.from_user.id == ADMIN_ID:
        kb = ReplyKeyboardMarkup(
            keyboard=main_kb.keyboard + [[KeyboardButton(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]],
            resize_keyboard=True
        )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=kb)

@dp.message(F.text == "üéØ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏:")
    await state.set_state(Deal.waiting_username)

@dp.message(Deal.waiting_username)
async def get_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å —Å–¥–µ–ª–∫–∏:")
    await state.set_state(Deal.waiting_description)

@dp.message(Deal.waiting_description)
async def get_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data["username"]
    description = message.text
    await bot.send_message(ADMIN_ID, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É:\n–£—á–∞—Å—Ç–Ω–∏–∫ 1: @{message.from_user.username}\n–£—á–∞—Å—Ç–Ω–∏–∫ 2: {username}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_deal_{message.from_user.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_deal_{message.from_user.id}")
            ]
        ]
    ))
    await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–¥–µ–ª–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É!")
    await state.clear()

@dp.callback_query(F.data.startswith("accept_deal_"))
async def accept_deal(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ —Å–¥–µ–ª–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    await callback.message.edit_text("–°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")

@dp.callback_query(F.data.startswith("decline_deal_"))
async def decline_deal(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    await bot.send_message(user_id, "‚ùå –í–∞—à–∞ —Å–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await callback.message.edit_text("–°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@dp.message(F.text == "üê† –¢–æ–≤–∞—Ä—ã")
async def show_categories(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé£ Fisch", callback_data="category_fisch")],
        [InlineKeyboardButton(text="üçá Bloxfruit", callback_data="category_bloxfruit")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query(F.data.startswith("category_"))
async def show_products(callback: types.CallbackQuery):
    category = callback.data.split("_")[1]
    cursor.execute("SELECT id, name, price, quantity FROM products WHERE category = ?", (category,))
    items = cursor.fetchall()
    kb = InlineKeyboardBuilder()
    for item in items:
        kb.button(text=f"{item[1]} ({item[3]} —à—Ç)", callback_data=f"buy_{item[0]}")
    kb.button(text="‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë", callback_data=f"suggest_{category}")
    await callback.message.answer(f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("buy_"))
async def buy_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    cursor.execute("SELECT name, price, quantity FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    if product and product[2] > 0:
        cursor.execute("UPDATE products SET quantity = quantity - 1 WHERE id = ?", (product_id,))
        conn.commit()
        cursor.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (callback.from_user.id,))
        cursor.execute("UPDATE users SET orders = orders + 1 WHERE id = ?", (callback.from_user.id,))
        conn.commit()
        await bot.send_message(ADMIN_ID, f"–ü–æ–∫—É–ø–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –∫—É–ø–∏–ª {product[0]} –∑–∞ {product[1]}‚ÇΩ.")
        await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {product[0]} –∑–∞ {product[1]}‚ÇΩ!")
    else:
        await callback.message.answer("–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")

@dp.callback_query(F.data.startswith("suggest_"))
async def suggest_item(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä –∏ —Ü–µ–Ω—É:")
    await state.set_state(Suggest.waiting_text)

@dp.message(Suggest.waiting_text)
async def get_suggestion(message: types.Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}:\n{message.text}", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_suggest"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_suggest")
            ]
        ]
    ))
    await message.answer("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    await state.clear()

@dp.message(F.text == "üí¨ –û—Ç–∑—ã–≤—ã")
async def reviews(message: types.Message):
    await message.answer("–û—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å: @raindrop_reviews")

@dp.message(F.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.", reply_markup=support_kb)

@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile(message: types.Message):
    cursor.execute("SELECT orders FROM users WHERE id = ?", (message.from_user.id,))
    orders = cursor.fetchone()
    orders = orders[0] if orders else 0
    await message.answer(f"–í–∞—à ID: {message.from_user.id}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {orders}")

@dp.message(F.text == "üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=admin_kb)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# –ê–¥–º–∏–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message(F.text == "üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã")
async def list_products(message: types.Message):
    cursor.execute("SELECT id, category, name, price, quantity FROM products")
    products = cursor.fetchall()
    text = "\n".join([f"ID {p[0]} | {p[1]} | {p[2]} | {p[3]}‚ÇΩ | {p[4]} —à—Ç" for p in products])
    await message.answer(text or "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

@dp.message(F.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def edit_product_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    await state.set_state(EditProduct.waiting_id)

@dp.message(EditProduct.waiting_id)
async def edit_product_id(message: types.Message, state: FSMContext):
    await state.update_data(id=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    await state.set_state(EditProduct.waiting_new_price)

@dp.message(EditProduct.waiting_new_price)
async def edit_product_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(EditProduct.waiting_new_quantity)

@dp.message(EditProduct.waiting_new_quantity)
async def edit_product_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute("UPDATE products SET price = ?, quantity = ? WHERE id = ?", (data["price"], message.text, data["id"]))
    conn.commit()
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@dp.message(F.text.regexp(r"^\d+$"))
async def delete_product_by_id(message: types.Message):
    cursor.execute("DELETE FROM products WHERE id = ?", (message.text,))
    conn.commit()
    await message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
