
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# üîê –í–°–¢–ê–í–¨ –°–Æ–î–ê –¢–í–û–ô –¢–û–ö–ï–ù –í –ö–ê–í–´–ß–ö–ê–•:
BOT_TOKEN = "7807213915:AAHNcYeY27DuOtkJbwH_2lHbElfKd212FZU"
ADMIN_ID = 7620745738  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
REVIEWS_LINK = "https://t.me/raindrop_reviews"

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# ===================== STATES =====================
class DealStates(StatesGroup):
    waiting_username = State()
    waiting_description = State()

class OfferStates(StatesGroup):
    waiting_offer = State()

class SupportStates(StatesGroup):
    waiting_question = State()

# ===================== FAKE DATA =====================
users = {}
orders = {}
products = [
    {"category": "Fisch", "name": "Shark", "mutations": "Toxic, Lightning", "quantity": 3, "price": 100},
    {"category": "Fisch", "name": "Salmon", "mutations": "None", "quantity": 10, "price": 50},
    {"category": "Bloxfruit", "name": "Dragon", "quantity": 2, "price": 200},
    {"category": "Bloxfruit", "name": "Leopard", "quantity": 5, "price": 150},
]
deals = []

# ===================== KEYBOARDS =====================
def main_menu(is_admin=False):
    buttons = [
        [InlineKeyboardButton(text="ü§ù –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
        [InlineKeyboardButton(text="üê† –¢–æ–≤–∞—Ä—ã", callback_data="products")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)],
        [InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def category_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé£ Fisch", callback_data="cat_fisch")],
        [InlineKeyboardButton(text="üçá Bloxfruit", callback_data="cat_bloxfruit")]
    ])

# ===================== HANDLERS =====================
@dp.message(F.text, F.chat.type == "private")
async def start_handler(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    users[message.from_user.id] = users.get(message.from_user.id, {"orders": 0})
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu(is_admin))

@dp.callback_query(F.data == "products")
async def show_categories(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_menu())

@dp.callback_query(F.data == "cat_fisch")
async def show_fisch(callback: CallbackQuery):
    text = "üé£ Fisch:

"
    for product in products:
        if product["category"] == "Fisch":
            text += f"<b>{product['name']}</b> ‚Äî {product['price']}‚ÇΩ ({product['quantity']} —à—Ç)
"
            if "mutations" in product:
                text += f"  üß¨ –ú—É—Ç–∞—Ü–∏–∏: {product['mutations']}
"
    text += "
‚ûï <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë</b>: /offer_fisch"
    await callback.message.edit_text(text)

@dp.callback_query(F.data == "cat_bloxfruit")
async def show_bloxfruit(callback: CallbackQuery):
    text = "üçá Bloxfruit:

"
    for product in products:
        if product["category"] == "Bloxfruit":
            text += f"<b>{product['name']}</b> ‚Äî {product['price']}‚ÇΩ ({product['quantity']} —à—Ç)
"
    text += "
‚ûï <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë</b>: /offer_bloxfruit"
    await callback.message.edit_text(text)

@dp.message(F.text == "/offer_fisch")
@dp.message(F.text == "/offer_bloxfruit")
async def offer_product(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:")
    await state.set_state(OfferStates.waiting_offer)

@dp.message(OfferStates.waiting_offer)
async def receive_offer(message: Message, state: FSMContext):
    await state.clear()
    await bot.send_message(
        ADMIN_ID,
        f"‚ûï <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b> –æ—Ç @{message.from_user.username} ({message.from_user.id}):

{message.text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_offer"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_offer")]
        ])
    )
    await message.answer("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.callback_query(F.data == "support")
async def support_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.")
    await state.set_state(SupportStates.waiting_question)

@dp.message(SupportStates.waiting_question)
async def receive_support(message: Message, state: FSMContext):
    await state.clear()
    await bot.send_message(ADMIN_ID, f"üõ† <b>–í–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> –æ—Ç @{message.from_user.username} ({message.from_user.id}):

{message.text}")
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@dp.callback_query(F.data == "profile")
async def profile_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    orders_count = users.get(user_id, {}).get("orders", 0)
    await callback.message.answer(f"üë§ –í–∞—à ID: {user_id}
üõç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}")

@dp.callback_query(F.data == "create_deal")
async def start_deal(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏:")
    await state.set_state(DealStates.waiting_username)

@dp.message(DealStates.waiting_username)
async def input_deal_user(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –≤ —á—ë–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è —Å–¥–µ–ª–∫–∞:")
    await state.set_state(DealStates.waiting_description)

@dp.message(DealStates.waiting_description)
async def input_deal_description(message: Message, state: FSMContext):
    data = await state.get_data()
    deals.append({
        "user1": message.from_user.id,
        "user2": data["username"],
        "description": message.text,
        "status": "pending"
    })
    await state.clear()
    await bot.send_message(
        ADMIN_ID,
        f"ü§ù <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b> –æ—Ç @{message.from_user.username} ({message.from_user.id})

"
        f"–£—á–∞—Å—Ç–Ω–∏–∫: {data['username']}
–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_deal"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_deal")]
        ])
    )
    await message.answer("–°–¥–µ–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")

@dp.callback_query(F.data == "admin")
async def admin_panel(callback: CallbackQuery):
    await callback.message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

(—Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ)")

# ===================== START =====================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
