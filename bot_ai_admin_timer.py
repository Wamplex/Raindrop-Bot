import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7807213915:AAGtoLBhhKihds0Y-YGwfBFZiCAZvx-P76Y"
ADMIN_ID = 7620745738
DB_FILE = "shop.db"

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect(DB_FILE)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY, name TEXT, category TEXT, mutation TEXT, price INTEGER, quantity INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS orders (id INTEGER PRIMARY KEY, user_id INTEGER, username TEXT, item_name TEXT, action TEXT, timestamp TEXT)''')
conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üê† –¢–æ–≤–∞—Ä—ã", callback_data="products")],
    [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/raindrop_reviews")],
    [InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")],
])

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
category_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üé£ Fisch", callback_data="category_Fisch")],
    [InlineKeyboardButton(text="üçá Bloxfruit", callback_data="category_Bloxfruit")]
])

@dp.message(Command('start'))
async def start(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu)

@dp.message(Command('admin'))
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞!")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@dp.callback_query(F.data == "products")
async def show_categories(call: types.CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_menu)

@dp.callback_query(F.data.startswith("category_"))
async def show_items(call: types.CallbackQuery):
    category = call.data.split("_")[1]
    cursor.execute("SELECT DISTINCT name FROM products WHERE category=?", (category,))
    products = cursor.fetchall()
    if not products:
        await call.message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    markup = InlineKeyboardMarkup(row_width=1)
    for product in products:
        markup.add(InlineKeyboardButton(text=product[0], callback_data=f"product_{product[0]}"))
    markup.add(InlineKeyboardButton(text="‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë", callback_data="propose_item"))
    await call.message.answer(f"üì¶ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:", reply_markup=markup)

@dp.callback_query(F.data.startswith("product_"))
async def show_product_details(call: types.CallbackQuery):
    product_name = call.data.split("_", 1)[1]
    cursor.execute("SELECT mutation, price, quantity FROM products WHERE name=?", (product_name,))
    variants = cursor.fetchall()
    if not variants:
        await call.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    text = f"<b>{product_name}</b> –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:

"
    markup = InlineKeyboardMarkup(row_width=1)
    for mutation, price, quantity in variants:
        text += f"üîπ {mutation}: {price}‚ÇΩ ({quantity} —à—Ç)
"
        markup.add(InlineKeyboardButton(text=f"{mutation} ({quantity} —à—Ç)", callback_data=f"buy_{product_name}_{mutation}"))
    await call.message.answer(text, reply_markup=markup)

@dp.callback_query(F.data.startswith("buy_"))
async def buy_product(call: types.CallbackQuery):
    _, product_name, mutation = call.data.split("_", 2)
    cursor.execute("SELECT price, quantity FROM products WHERE name=? AND mutation=?", (product_name, mutation))
    product = cursor.fetchone()
    if not product or product[1] <= 0:
        await call.message.answer("‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")
        return
    cursor.execute("UPDATE products SET quantity = quantity - 1 WHERE name=? AND mutation=?", (product_name, mutation))
    conn.commit()
    cursor.execute("INSERT INTO orders (user_id, username, item_name, action, timestamp) VALUES (?, ?, ?, ?, datetime('now'))",
                   (call.from_user.id, call.from_user.username, f"{product_name} ({mutation})", "–ü–æ–∫—É–ø–∫–∞"))
    conn.commit()
    await call.message.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    await bot.send_message(ADMIN_ID, f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{call.from_user.username}: {product_name} ({mutation})")

@dp.callback_query(F.data == "propose_item")
async def propose_item(call: types.CallbackQuery):
    await call.message.answer("‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä –∏ –∂–µ–ª–∞–µ–º—ã–π –æ–±–º–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")

@dp.callback_query(F.data == "support")
async def support(call: types.CallbackQuery):
    await call.message.answer("üõ† –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")

@dp.callback_query(F.data == "profile")
async def profile(call: types.CallbackQuery):
    cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id=?", (call.from_user.id,))
    orders_count = cursor.fetchone()[0]
    await call.message.answer(f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
ID: {call.from_user.id}
–°–¥–µ–ª–æ–∫: {orders_count}")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

