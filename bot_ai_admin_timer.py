import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

BOT_TOKEN = "—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω"
ADMIN_ID = 7620745738
REVIEWS_LINK = "https://t.me/raindrop_reviews"

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# ========== –í–†–ï–ú–ï–ù–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï ==========
products = {
    "Fisch": [
        {"name": "Kraken", "mutations": "Shiny", "quantity": 1, "price": 40},
        {"name": "Leviathan", "mutations": "", "quantity": 2, "price": 30},
    ],
    "Bloxfruit": [
        {"name": "Leopard", "quantity": 1, "price": 155},
        {"name": "Gas", "quantity": 1, "price": 175},
        {"name": "Dough", "quantity": 2, "price": 115},
        {"name": "Venom", "quantity": 1, "price": 50},
    ]
}

deals = []

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class DealStates(StatesGroup):
    waiting_username = State()
    waiting_description = State()

class OfferStates(StatesGroup):
    waiting_offer = State()

class SupportStates(StatesGroup):
    waiting_question = State()

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("ü§ù –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
        [InlineKeyboardButton("üê† –¢–æ–≤–∞—Ä—ã", callback_data="products")],
        [InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)],
        [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    ])

def category_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üé£ Fisch", callback_data="cat_fisch")],
        [InlineKeyboardButton("üçá Bloxfruit", callback_data="cat_bloxfruit")]
    ])

# ========== –•–≠–ù–î–õ–ï–†–´ ==========
@dp.message(F.text, F.chat.type == "private")
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu())

@dp.callback_query(F.data == "products")
async def show_categories(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_menu())

@dp.callback_query(F.data == "cat_fisch")
async def show_fisch(callback: CallbackQuery):
    text = "üé£ Fisch:\n\n"
    for item in products["Fisch"]:
        text += f"<b>{item['name']}</b> ‚Äî {item['price']}‚ÇΩ ({item['quantity']} —à—Ç)\n"
        if item['mutations']:
            text += f"  üß¨ –ú—É—Ç–∞—Ü–∏–∏: {item['mutations']}\n"
    text += "\n‚ûï <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë</b>: /offer_fisch"
    await callback.message.edit_text(text)

@dp.callback_query(F.data == "cat_bloxfruit")
async def show_bloxfruit(callback: CallbackQuery):
    text = "üçá Bloxfruit:\n\n"
    for item in products["Bloxfruit"]:
        text += f"<b>{item['name']}</b> ‚Äî {item['price']}‚ÇΩ ({item['quantity']} —à—Ç)\n"
    text += "\n‚ûï <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë</b>: /offer_bloxfruit"
    await callback.message.edit_text(text)

@dp.message(F.text == "/offer_fisch")
@dp.message(F.text == "/offer_bloxfruit")
async def offer_command(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:")
    await state.set_state(OfferStates.waiting_offer)

@dp.message(OfferStates.waiting_offer)
async def receive_offer(message: Message, state: FSMContext):
    await state.clear()
    await bot.send_message(
        ADMIN_ID,
        f"‚ûï <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b> –æ—Ç @{message.from_user.username} ({message.from_user.id}):\n{message.text}"
    )
    await message.answer("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")

@dp.callback_query(F.data == "support")
async def support(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(SupportStates.waiting_question)

@dp.message(SupportStates.waiting_question)
async def support_question(message: Message, state: FSMContext):
    await state.clear()
    await bot.send_message(ADMIN_ID, f"üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç @{message.from_user.username} ({message.from_user.id}):\n{message.text}")
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@dp.callback_query(F.data == "profile")
async def profile(callback: CallbackQuery):
    await callback.message.answer(f"üë§ –í–∞—à ID: <code>{callback.from_user.id}</code>")

@dp.callback_query(F.data == "create_deal")
async def start_deal(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏:")
    await state.set_state(DealStates.waiting_username)

@dp.message(DealStates.waiting_username)
async def deal_username(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–¥–µ–ª–∫—É:")
    await state.set_state(DealStates.waiting_description)

@dp.message(DealStates.waiting_description)
async def deal_description(message: Message, state: FSMContext):
    data = await state.get_data()
    deals.append({
        "from": message.from_user.username,
        "to": data['username'],
        "description": message.text
    })
    await state.clear()
    await bot.send_message(
        ADMIN_ID,
        f"ü§ù <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>\n–û—Ç: @{message.from_user.username}\n–°: {data['username']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}"
    )
    await message.answer("–°–¥–µ–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.")

# ========== –°–¢–ê–†–¢ ==========
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
