# telegram_shop_bot.py
# Telegram-–±–æ—Ç —Å SQLite, —Ç–æ–≤–∞—Ä–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –∑–∞—è–≤–∫–∞–º–∏, –∞–¥–º–∏–Ω–∫–æ–π

import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime

TOKEN = "7807213915:AAGtoLBhhKihds0Y-YGwfBFZiCAZvx-P76Y"
ADMIN_ID = 7620745738

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

conn = sqlite3.connect("shop.db")
c = conn.cursor()

# –¢–∞–±–ª–∏—Ü—ã
c.execute("""
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    category TEXT,
    price INTEGER,
    available BOOLEAN,
    quantity INTEGER,
    mutations TEXT
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    item TEXT,
    action TEXT,
    quantity INTEGER,
    time TEXT
)
""")
conn.commit()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üê† –¢–æ–≤–∞—Ä—ã")],
        [KeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã"), KeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
    ], resize_keyboard=True
)

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu)

@dp.message(F.text == "üê† –¢–æ–≤–∞—Ä—ã")
async def show_categories(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé£ Fisch", callback_data="cat_Fisch")],
        [InlineKeyboardButton(text="üçá Bloxfruit", callback_data="cat_Bloxfruit")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query(F.data.startswith("cat_"))
async def list_products(callback: types.CallbackQuery):
    category = callback.data.split("_")[1]
    c.execute("SELECT id, name, price FROM products WHERE category=? AND available=1", (category,))
    items = c.fetchall()
    if not items:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    kb = InlineKeyboardMarkup()
    for pid, name, price in items:
        kb.add(InlineKeyboardButton(text=f"{name} ‚Äî {price}‚ÇΩ", callback_data=f"item_{pid}"))
    await callback.message.edit_text(f"{category}:", reply_markup=kb)

@dp.callback_query(F.data.startswith("item_"))
async def show_product(callback: types.CallbackQuery):
    pid = int(callback.data.split("_")[1])
    c.execute("SELECT name, price, quantity, mutations FROM products WHERE id=?", (pid,))
    product = c.fetchone()
    if not product:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    name, price, qty, mutations = product
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}"),
         InlineKeyboardButton(text="üîÅ –û–±–º–µ–Ω", callback_data=f"exchange_{pid}")],
    ])
    text = f"{name}\n–¶–µ–Ω–∞: {price}‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: {qty}\n–ú—É—Ç–∞—Ü–∏–∏: {mutations}"
    await callback.message.edit_text(text, reply_markup=kb)

@dp.callback_query(F.data.startswith("buy_"))
@dp.callback_query(F.data.startswith("exchange_"))
async def handle_order(callback: types.CallbackQuery):
    pid = int(callback.data.split("_")[1])
    action = "buy" if callback.data.startswith("buy") else "exchange"
    c.execute("SELECT name, price FROM products WHERE id=?", (pid,))
    product = c.fetchone()
    if not product:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    name, price = product
    username = callback.from_user.username or "–±–µ–∑ username"
    user_id = callback.from_user.id
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    c.execute("INSERT INTO orders (user_id, username, item, action, quantity, time) VALUES (?, ?, ?, ?, ?, ?)",
              (user_id, username, name, action, 1, now))
    conn.commit()
    await bot.send_message(ADMIN_ID, f"üì© –ó–∞–ø—Ä–æ—Å –æ—Ç @{username} –Ω–∞ {action} —Ç–æ–≤–∞—Ä–∞ {name}")
    await callback.message.answer("‚åõÔ∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def show_profile(message: Message):
    user_id = message.from_user.id
    c.execute("SELECT COUNT(*) FROM orders WHERE user_id=?", (user_id,))
    count = c.fetchone()[0]
    await message.answer(f"üë§ –í–∞—à ID: {user_id}\nüì¶ –ó–∞–∫–∞–∑–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ: {count}")

@dp.message(F.text == "üí¨ –û—Ç–∑—ã–≤—ã")
async def reviews(message: Message):
    await message.answer("–û—Ç–∑—ã–≤—ã: https://t.me/raindrop_reviews")

@dp.message(F.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.")

@dp.message(F.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    c.execute("SELECT id, name, price, available, quantity FROM products")
    items = c.fetchall()
    text = "\n".join([f"{i[0]}. {i[1]} ‚Äî {i[2]}‚ÇΩ | {i[4]} —à—Ç | {'‚úÖ' if i[3] else '‚ùå'}" for i in items])
    await message.answer("üõ† –í—Å–µ —Ç–æ–≤–∞—Ä—ã:\n" + text)

# –ó–∞–ø—É—Å–∫
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
