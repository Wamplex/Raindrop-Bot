import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm import FSMContext, State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ParseMode
from aiogram.utils import executor
import aiosqlite

from config import TOKEN, ADMIN_ID

logging.basicConfig(level=logging.INFO)

bot = Bot(TOKEN)
dp = Dispatcher(bot)

class OrderState(StatesGroup):
    waiting_for_username = State()
    waiting_for_deal_description = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_item(id, category):
    async with aiosqlite.connect('shop.db') as db:
        cursor = await db.execute("SELECT * FROM items WHERE id = ? AND category = ?", (id, category))
        item = await cursor.fetchone()
        return item

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ü§ù –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", "üê† –¢–æ–≤–∞—Ä—ã", "üí¨ –û—Ç–∑—ã–≤—ã", "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
@dp.message_handler(text="ü§ù –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏:")
        await OrderState.waiting_for_username.set()

@dp.message_handler(state=OrderState.waiting_for_username)
async def deal_username(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text
    await message.answer("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç –∑–∞ —Å–¥–µ–ª–∫–∞:")
    await OrderState.waiting_for_deal_description.set()

@dp.message_handler(state=OrderState.waiting_for_deal_description)
async def deal_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    
    deal_info = f"–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞:\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{data['username']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
    await bot.send_message(ADMIN_ID, deal_info, reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"))
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
@dp.message_handler(lambda message: message.text in ["‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"], user_id=ADMIN_ID)
async def accept_or_reject(message: types.Message):
    if message.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å":
        await message.answer("–°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        await bot.send_message(ADMIN_ID, "–°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∫—É
        await bot.send_message(ADMIN_ID, "–°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    elif message.text == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å":
        await message.answer("–°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∫—É
        await bot.send_message(ADMIN_ID, "–°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# –¢–æ–≤–∞—Ä—ã
@dp.message_handler(text="üê† –¢–æ–≤–∞—Ä—ã")
async def show_products(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üé£ Fisch", "üçá Bloxfruit")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=markup)

@dp.message_handler(text="üé£ Fisch")
async def show_fish(message: types.Message):
    # –ü—Ä–∏–º–µ—Ä: –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä—ã–±—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Nessie", "Northstar Serpent", "Leviathan")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É", reply_markup=markup)

@dp.message_handler(lambda message: message.text in ["Nessie", "Northstar Serpent", "Leviathan"])
async def show_fish_mutations(message: types.Message):
    # –ü—Ä–∏–º–µ—Ä: –ø–æ–∫–∞–∑—ã–≤–∞—é –º—É—Ç–∞—Ü–∏–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–û–±—ã—á–Ω–∞—è", "Sparkling", "Shiny")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º—É—Ç–∞—Ü–∏—é", reply_markup=markup)

@dp.message_handler(text="üçá Bloxfruit")
async def show_fruits(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Leopard", "Gas", "Dough")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä—É–∫—Ç", reply_markup=markup)

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message_handler(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.")

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message_handler(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message):
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º
    await message.answer(f"–í–∞—à ID: {user_id}\n–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: 0")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
