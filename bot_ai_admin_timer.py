# ------------------------------
# –ò–º–ø–æ—Ä—Ç—ã
# ------------------------------
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime

# ------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ------------------------------
TOKEN = "7807213915:AAGtoLBhhKihds0Y-YGwFBFZiCAZvx-P76Y"
ADMIN_ID = 7620745738
DB_FILE = "shop.db"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ------------------------------
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üê† –¢–æ–≤–∞—Ä—ã", callback_data="products")],
    [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/raindrop_reviews")],
    [InlineKeyboardButton(text="üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")],
])

products_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üéØ Fisch", callback_data="category_fish")],
    [InlineKeyboardButton(text="üçá Bloxfruit", callback_data="category_bloxfruit")]
])

admin_panel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚öíÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")],
    [InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∫–∞", callback_data="deal")]
])

# ------------------------------
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# ------------------------------
conn = sqlite3.connect(DB_FILE)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY, name TEXT, mutation TEXT, price INTEGER, quantity INTEGER)''')
c.execute('''CREATE TABLE IF NOT EXISTS orders (id INTEGER PRIMARY KEY, user_id INTEGER, username TEXT, product TEXT, action TEXT, time TEXT)''')
conn.commit()

# ------------------------------
# –ö–æ–º–∞–Ω–¥—ã
# ------------------------------
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –º–∞–≥–∞–∑–∏–Ω–µ!", reply_markup=main_menu)

# ------------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏
# ------------------------------
@dp.callback_query()
async def callbacks(call: CallbackQuery):
    if call.data == "products":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=products_menu)

    elif call.data == "category_fish":
        await call.message.edit_text("üê† Fisch —Ç–æ–≤–∞—Ä—ã", reply_markup=await fish_menu())

    elif call.data == "category_bloxfruit":
        await call.message.edit_text("üçá Bloxfruit —Ç–æ–≤–∞—Ä—ã", reply_markup=await bloxfruit_menu())

    elif call.data == "support":
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.")

    elif call.data == "profile":
        await call.message.answer(f"–í–∞—à ID: {call.from_user.id}")

    elif call.data == "admin" and call.from_user.id == ADMIN_ID:
        await call.message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞.")

    elif call.data == "deal":
        await call.message.answer("–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# ------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
# ------------------------------
async def fish_menu():
    kb = []
    c.execute("SELECT DISTINCT name FROM products WHERE name LIKE '%Fish%'")
    fishes = c.fetchall()
    for fish in fishes:
        kb.append([InlineKeyboardButton(text=fish[0], callback_data=f"buy_{fish[0]}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

async def bloxfruit_menu():
    kb = []
    c.execute("SELECT DISTINCT name FROM products WHERE name LIKE '%Fruit%'")
    fruits = c.fetchall()
    for fruit in fruits:
        kb.append([InlineKeyboardButton(text=fruit[0], callback_data=f"buy_{fruit[0]}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ------------------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
