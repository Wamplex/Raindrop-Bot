import asyncio
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.enums.parse_mode import ParseMode
from datetime import datetime, timedelta

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "7807213915:AAEkplZ9d3AXmbX6U11R2GoFPHPhLnspaus"
ADMIN_ID = 7620745738  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

user_deals = {}  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã

def main_menu(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="ü§ù –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url="https://t.me/virus_play_bot/app?startapp=inviteCodeuNWkBu8PylHXHXLO")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/raindrop_reviews")],
        [InlineKeyboardButton(text="üõ° –ì–¥–µ —è –≥–∞—Ä–∞–Ω—Ç?", callback_data="guarantee_chats")],
        [InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    ]
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:", reply_markup=main_menu(message.from_user.id))

@router.callback_query(F.data == "create_deal")
async def create_deal_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_deals[user_id] = datetime.now()
    cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="cancel_deal")]
    ])
    await callback.message.edit_text(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–¥–µ–ª–∫—É.\n\n–£–∫–∞–∂–∏—Ç–µ username –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É—Å–ª–æ–≤–∏—è, —Ü–µ–Ω—É –∏ –¥–µ—Ç–∞–ª–∏.",
        reply_markup=cancel_kb
    )
    await bot.send_message(ADMIN_ID, f"üì¨ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –æ—Ç <a href='tg://user?id={user_id}'>{user_id}</a>.")
    asyncio.create_task(auto_cancel_deal(user_id))

@router.callback_query(F.data == "cancel_deal")
async def cancel_deal_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_deals:
        del user_deals[user_id]
    await callback.message.edit_text("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def auto_cancel_deal(user_id: int):
    await asyncio.sleep(3600)  # 1 —á–∞—Å
    if user_id in user_deals:
        del user_deals[user_id]
        try:
            await bot.send_message(user_id, "‚è≥ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.")
            await bot.send_message(ADMIN_ID, f"‚åõ –°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ –∞–≤—Ç–æ–æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except:
            pass

@router.callback_query(F.data == "guarantee_chats")
async def guarantee_chats_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üõ° –ì–¥–µ —è –≥–∞—Ä–∞–Ω—Ç?\n\n"
        "–ß–∞—Ç 1: https://t.me/naytixa\n"
        "–ß–∞—Ç 2: https://t.me/ChatFischS\n"
        "–ß–∞—Ç 3: https://t.me/fischtradeschat"
    )

@router.callback_query(F.data == "support")
async def support_callback(callback: CallbackQuery):
    await callback.message.edit_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç <a href='tg://user?id={callback.from_user.id}'>{callback.from_user.id}</a>.")

@router.callback_query(F.data == "profile")
async def profile_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        f"üë§ –í–∞—à ID: <code>{callback.from_user.id}</code>\n"
        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: 0"
    )

@router.callback_query(F.data == "admin")
async def admin_panel(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    await callback.message.edit_text(
        "üåê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "1. üîä –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "2. üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
        "3. üì• –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
        "4. ‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n"
        "5. üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    )

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
