from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart, StateFilter
from aiogram import Router

import asyncio
import logging

TOKEN = "7807213915:AAHNcYeY27DuOtkJbwH_2lHbElfKd212FZU"
ADMIN_ID = 7620745738

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

dp.include_router(router)

class Deal(StatesGroup):
    writing_deal = State()

main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üê† –¢–æ–≤–∞—Ä—ã", callback_data="products")],
    [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/raindrop_reviews")],
    [InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet")],
    [InlineKeyboardButton(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]
])

products_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üé£ Fisch", callback_data="fisch")],
    [InlineKeyboardButton(text="üçá Bloxfruit", callback_data="bloxfruit")]
])

support_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="write_support")]
])

fisch_products = {
    "Sea Leviathan": {"price": 40, "mutations": ["Magma", "Sparkling Magma", "Solarblaze"]},
    "Nessie": {"price": 30, "mutations": ["SSA", "SST"]},
    "Northstar Serpent": {"price": 15, "mutations": ["Jolly", "SS"]}
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä—ã–±—ã —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –≤–ø–∏—Å–∞—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu)

@router.callback_query(F.data == "products")
async def show_categories(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=products_menu)

@router.callback_query(F.data == "fisch")
async def show_fisch(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    for name in fisch_products:
        builder.button(text=name, callback_data=f"fisch_item:{name}")
    builder.button(text="‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë", callback_data="offer_fisch")
    await callback.message.edit_text("üé£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("fisch_item:"))
async def show_fisch_mutations(callback: CallbackQuery):
    name = callback.data.split(":")[1]
    data = fisch_products[name]
    builder = InlineKeyboardBuilder()
    for mutation in data["mutations"]:
        builder.button(text=mutation, callback_data=f"buy:{name}:{mutation}")
    await callback.message.edit_text(f"{name} - {data['price']}‚ÇΩ\n–í—ã–±–µ—Ä–∏—Ç–µ –º—É—Ç–∞—Ü–∏—é:", reply_markup=builder.as_markup())

@router.callback_query(F.data == "bloxfruit")
async def show_bloxfruit(callback: CallbackQuery):
    fruits = ["Leopard", "Gas", "Dough", "Venom", "T-Rex", "Gravity", "Mammoth", "Creation", "Buddha", "Shadow", "Portal", "Spider", "Quake"]
    builder = InlineKeyboardBuilder()
    for fruit in fruits:
        builder.button(text=fruit, callback_data=f"buy:{fruit}:-")
    builder.button(text="‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë", callback_data="offer_bloxfruit")
    await callback.message.edit_text("üçá –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä—É–∫—Ç:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("buy:"))
async def buy_handler(callback: CallbackQuery):
    _, name, mutation = callback.data.split(":")
    price = fisch_products.get(name, {}).get("price", 0)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {name} ({mutation})\n–¶–µ–Ω–∞: {price}‚ÇΩ\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @RaindropSpam_bot")
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {name} ({mutation}) –æ—Ç @{callback.from_user.username}")

@router.callback_query(F.data == "offer_fisch")
@router.callback_query(F.data == "offer_bloxfruit")
async def offer_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–æ–≤–∞—Ä –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
    await state.set_state(Deal.writing_deal)

@router.message(StateFilter(Deal.writing_deal))
async def handle_deal_offer(message: Message, state: FSMContext):
    await state.clear()
    await bot.send_message(ADMIN_ID, f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç @{message.from_user.username}:\n{message.text}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_offer")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_offer")]
    ]))
    await message.answer("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

@router.callback_query(F.data == "support")
async def support_message(callback: CallbackQuery):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.", reply_markup=support_kb)

@router.callback_query(F.data == "cabinet")
async def cabinet(callback: CallbackQuery):
    await callback.message.edit_text(f"üë§ –í–∞—à ID: {callback.from_user.id}\n–ó–∞–∫–∞–∑–æ–≤: –ø–æ–∫–∞ –Ω–µ—Ç")

@router.callback_query(F.data == "admin")
async def admin_panel(callback: CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        await callback.message.edit_text("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    else:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))


if __name__ == "__main__":
    asyncio.run(main())
