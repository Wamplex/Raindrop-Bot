import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.markdown import hbold

TOKEN = "7807213915:AAGtoLBhhKihds0Y-YGwfBFZiCAZvx-P76Y"
ADMIN_ID = 7620745738

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

def get_products_by_category(category):
    conn = sqlite3.connect("shop.db")
    cur = conn.cursor()
    cur.execute("SELECT id, name, mutation, base_price, stock FROM products WHERE category = ?", (category,))
    products = cur.fetchall()
    conn.close()
    return products

def record_order(user_id, product_id):
    conn = sqlite3.connect("shop.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO orders (user_id, product_id) VALUES (?, ?)", (user_id, product_id))
    cur.execute("UPDATE products SET stock = stock - 1 WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()

def get_user_order_count(user_id):
    conn = sqlite3.connect("shop.db")
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM orders WHERE user_id = ?", (user_id,))
    count = cur.fetchone()[0]
    conn.close()
    return count

@dp.message(CommandStart())
async def cmd_start(msg: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üê† –¢–æ–≤–∞—Ä—ã", callback_data="menu_goods")
    builder.button(text="üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/raindrop_reviews")
    builder.button(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    builder.button(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")
    if msg.from_user.id == ADMIN_ID:
        builder.button(text="üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "menu_goods")
async def menu_goods(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üé£ Fisch", callback_data="cat_Fisch")
    builder.button(text="üçá Bloxfruit", callback_data="cat_Bloxfruit")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("cat_"))
async def show_products(callback: CallbackQuery):
    category = callback.data.split("_")[1]
    products = get_products_by_category(category)

    if not products:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = f"<b>{category}:</b>\n"
    builder = InlineKeyboardBuilder()
    for pid, name, mutation, price, stock in products:
        title = f"{name} ({mutation})" if mutation else name
        text += f"{hbold(title)} ‚Äî {price}‚ÇΩ ({stock} —à—Ç.)\n"
        builder.button(text=title, callback_data=f"buy_{pid}")

    builder.button(text="‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë", callback_data=f"offer_{category}")
    await callback.message.edit_text(text, reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("buy_"))
async def handle_buy(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    conn = sqlite3.connect("shop.db")
    cur = conn.cursor()
    cur.execute("SELECT name, mutation, base_price, stock FROM products WHERE id = ?", (product_id,))
    row = cur.fetchone()
    conn.close()

    if not row or row[3] <= 0:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
        return

    record_order(callback.from_user.id, product_id)

    await callback.message.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!")
    await bot.send_message(ADMIN_ID, f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç <a href='tg://user?id={callback.from_user.id}'>{callback.from_user.full_name}</a> ‚Äî {row[0]} ({row[1]})")

@dp.callback_query(F.data.startswith("offer_"))
async def offer_product(callback: CallbackQuery):
    category = callback.data.split("_")[1]
    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
    dp.data[callback.from_user.id] = category  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

@dp.message()
async def process_offer(msg: Message):
    if msg.from_user.id in dp.data:
        category = dp.data.pop(msg.from_user.id)
        await bot.send_message(ADMIN_ID, f"üì• –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{msg.from_user.username or msg.from_user.id} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n{msg.text}",
                               reply_markup=InlineKeyboardBuilder().row(
                                   types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="ok"),
                                   types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="no")
                               ).as_markup())
        await msg.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@dp.callback_query(F.data == "support")
async def support(callback: CallbackQuery):
    await callback.message.answer("üõ† –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.")

@dp.callback_query(F.data == "profile")
async def profile(callback: CallbackQuery):
    count = get_user_order_count(callback.from_user.id)
    await callback.message.answer(f"üë§ –í–∞—à ID: {callback.from_user.id}\nüì¶ –ó–∞–∫–∞–∑–æ–≤: {count}")

@dp.callback_query(F.data == "admin")
async def admin(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    await callback.message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
