from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime

TOKEN = "7807213915:AAGtoLBhhKihds0Y-YGwfBFZiCAZvx-P76Y"
ADMIN_IDS = [7620745738]

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

waiting_users = {}
deal_timers = {}

# –ö–Ω–æ–ø–∫–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")],
        [KeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã"), KeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ],
    resize_keyboard=True
)

cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")]],
    resize_keyboard=True
)

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Raindrop –ì–∞—Ä–∞–Ω—Ç –ë–æ—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_keyboard
    )

@dp.message(F.text == "‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    if user_id in waiting_users:
        await message.answer("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞.", reply_markup=cancel_keyboard)
        return
    waiting_users[user_id] = {"username": username, "created": datetime.utcnow()}
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å —Å–¥–µ–ª–∫–∏ –∏ —É–∫–∞–∂–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=cancel_keyboard)

    async def reminder():
        await asyncio.sleep(600)
        if user_id in waiting_users:
            await message.answer("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–¥–µ–ª–∫—É. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    deal_timers[user_id] = asyncio.create_task(reminder())

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")
async def cancel_deal(message: Message):
    user_id = message.from_user.id
    if user_id in waiting_users:
        del waiting_users[user_id]
        if user_id in deal_timers:
            deal_timers[user_id].cancel()
            del deal_timers[user_id]
        await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard)
    else:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏.", reply_markup=main_keyboard)

@dp.message(F.text == "üí¨ –û—Ç–∑—ã–≤—ã")
async def reviews(message: Message):
    await message.answer("üì¢ –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏: https://t.me/raindrop_reviews", reply_markup=main_keyboard)

@dp.message(F.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    await message.answer("üì© –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.", reply_markup=main_keyboard)

@dp.message(F.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
async def active_deals(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not waiting_users:
        await message.answer("üóÇ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç.")
        return
    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n"
    for uid, data in waiting_users.items():
        text += f"üë§ @{data['username']} ({uid})\n"
    await message.answer(text)

@dp.message()
async def fallback(message: Message):
    await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=main_keyboard)

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

