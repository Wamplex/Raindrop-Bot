import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ChatPermissions

import os
import asyncio

# –í–∞—à —Ç–æ–∫–µ–Ω
TOKEN = '7807213915:AAEkplZ9d3AXmbX6U11R2GoFPHPhLnspaus'

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
admins = [123456789, 987654321]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id: int):
    return user_id in admins

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
    keyboard.add(KeyboardButton("ü§ù –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"))
    keyboard.add(KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑"))
    return keyboard

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑"
def prize_button():
    return [KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑")]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    if message.from_user.id in admins:
        keyboard = main_menu()
        keyboard.add(KeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    else:
        keyboard = main_menu()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
@dp.message_handler(lambda message: message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: types.Message):
    await message.answer("–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"
@dp.message_handler(lambda message: message.text == "ü§ù –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal(message: types.Message):
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–¥–µ–ª–∫—É:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–û—Ç–º–µ–Ω–∞")))
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ª–æ–≥–∏–∫–∏)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞
@dp.message_handler(lambda message: message.text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑")
async def get_prize(message: types.Message):
    await message.answer("–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/virus_play_bot/app?startapp=inviteCodeuNWkBu8PylHXHXLO")
    await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑ ‚Äî @RaindropSpam_bot", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message_handler(lambda message: message.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and is_admin(message.from_user.id))
async def admin_panel(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–æ–∫"))
    keyboard.add(KeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–æ–∫ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.message_handler(lambda message: message.text == "üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–æ–∫" and is_admin(message.from_user.id))
async def view_deals(message: types.Message):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫)
    await message.answer("–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫...", reply_markup=admin_panel_keyboard())

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üîß –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞" and is_admin(message.from_user.id))
async def add_admin(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

@dp.message_handler(lambda message: message.text.isdigit() and is_admin(message.from_user.id))
async def assign_admin(message: types.Message):
    user_id = int(message.text)
    if user_id not in admins:
        admins.append(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    else:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥" and is_admin(message.from_user.id))
async def back_to_admin_menu(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_panel_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message):
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def admin_panel_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–æ–∫"))
    keyboard.add(KeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
